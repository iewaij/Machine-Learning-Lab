复杂
世界是 n 维的，不仅仅是我们看到的三维中的一切，还有时间、温度等等等。我们感受到的，只是 n 维世界在三维世界中的投影。


#博客

Docker + TensorFlow 入门、主题指南
Docker 是个非常轻量级的虚拟机，可以保证环境不影响代码的运行。

TensorFlow 官方在 Docker 上有镜像，可以直接下载。这几天研究了一点 Docker，感觉只看懂了一小角，也不知道对不对，就斗胆先写一些了。

镜像和容器
Docker Hub 上可以得到各种来源的镜像，这个镜像就像以前装系统的光盘或者 .iso，装载了这个系统最初始的状态。

Docker 可以帮助我们把这个镜像安装，变成我们可以使用的容器，在这个容器里随便折腾，折腾完了可以删掉，再从镜像新建一个新容器，这样可以保证以前的折腾不会影响现在的代码，队友的环境也可以和自己保持一致。

上手
本文以 Mac 为例，介绍如何上手 Docker。

Homebrew 安装 Docker
如果有 homebrew，直接运行代码 brew cask install docker 即可安装 Docker，启动 Docker 后，Menu Bar 上会出现一只鲸鱼，也不是很明白鲸鱼和虚拟机有什么关系。

Docker 加速器设置
因为国内的垃圾网络，最好装加速器来减少下载镜像的等待时间，我用了号称永久免费的 DaoCloud，在得到镜像地址后，在 Docker 中如图所示设置。

[image:A8AAFAF0-AFD9-433A-907A-ACF8766ECA23-1965-000005595F87E876/屏幕快照 2017-03-05 下午2.57.26.png]

TensorFlow 镜像安装
启动 Docker，然后终端运行以下命令，即可从 Docker Hub 上下载 TensorFlow 镜像。


docker run -it -p 8888:8888 tensorflow/tensorflow


如果你想要和你的容器共享文件，那么最好用这个命令：


docker run -it -p 8888:8888 -v ~/pathe/to/folder/you/wannna/share:/portal tensorflow/tensorflow


从你的容器访问 /portal 文件夹，就是你电脑上的 ~/pathe/to/folder/you/wannna/share 文件夹。/portal 这个名字可以随便改，不过我觉得叫 /portal 还蛮酷的。

如果一切顺利的话，你就可以打开终端的链接，从浏览器访问 Jupyter Notebook 了。

Docker 关键命令
使用 docker images 查看装了哪些镜像：

[image:439873D6-E7ED-45D5-8D5A-D8F857DFA23D-1965-000005C92A1EDCB2/屏幕快照 2017-03-05 下午3.05.15.png]

使用 docker rmi <image name or tag or ID whatever> 可以删除镜像。

使用 docker ps 查看正在运行的容器（图中没有正在运行的容器）：

[image:FF365361-DDDC-42A3-8866-D82C7254A6AF-1965-000005DFCC30227F/屏幕快照 2017-03-05 下午3.07.15.png]

使用 docker ps -a 查看所有的容器：

[image:C78A70EF-C1D6-4975-9B11-27BE7CE46BC2-1965-000005F3F98D7524/屏幕快照 2017-03-05 下午3.08.37.png]

使用 docker rm <container name or tag or ID whatever> 可以删除容器。

如果觉得一个一个删太烦，运行 docker rm $(docker ps -a -q)删除所有容器。

若要停止容器（比如端口被占），运行 docker stop <container name or tag or ID whatever>。启动容器运行 docker start <container name or tag or ID whatever>。

好的，现在到关键部分了！当我启动了一个 TensorFlow 容器后，我该怎么开始运行 Jupyter Notebook 呢？运行docker start -i <container name or tag or ID whatever> 就可以了！

在 notebook 里测试一下 /portal 是否正常，可以运行：


!ls /portal/


如果你和一样用的是 oh-my-zsh，你可以在 zshconfig 里加上这两个 alias 方便以后使用：


# 新建容器并从 /portal 传输文件
alias tfdocker="docker run -it -p 8888:8888 -v ~/Coding/DeepLearning101:/portal tensorflow/tensorflow"

# 启动 ID 为 a4032edb39cb 的容器并开启 Jupyter Notebook
alias startdocker="docker start -i a4032edb39cb"


Jupyter Notebook 主题更改
用了新编辑器怎么可以不换主题，在 Jupyter Notebook 中，以感叹号开头运行命令就是终端指令。在 notebook 中运行：


!pip install --upgrade jupyterthemes


如果一切顺利（在中国的垃圾网络下怎么可能顺利，你可能要多试几次），你就可以参考GitHub - dunovank/jupyter-themes 文档 做主题调整了。我输入的命令是：


# 用 solarized-light 主题，代码字体是 inputmono，字号 12 点，界面字体 sourcesans，输出字体 sourcesans，开启工具栏，开启标题栏
!jt -t solarized-light -f inputmono -fs 12 -nf sourcesans -tf sourcesans -T -N


结果如图：

[image:BBEDC019-FC9E-47FF-8BF8-32F771697B38-1965-0000072987BC43E4/vPAAAAAElFTkSuQmCC.png]

#博客

Sublime Text 3 + TensorFlow 安装指南
使用 virtualenv + virtualenvwrapper + Virtualenv （Sublime Package Control)
参考网站：
Virtuenvwrapper 文档
 Virtualenv - Packages - Package Control



#博客

我 2016 年的习得与利器
碎片知识
改掉了用稍后读（Pocket）然后再也不读的习惯，先大量读并注意用非常快速地方式标记（例如知乎的点赞），然后用6小时回顾法和卡片法增加记忆难度。

关于6小时回顾法和卡片法，请参考 读书十二问。

* 知乎 依然是我知识输入的主力。
* 少数派 依然是我 Mac 和 iOS 上工具使用的输入主力。
* 利器 通过采访各领域的创造者并获知他（她）们背后的工具，是我今年剁手的主要来源。
* OFFLINE，性感的科技文化网站。
* 阳志平的博客  对我彻底打开了认知科学的大门，之前在 Coursera 的对认知科学的学习仍然是一知半解，但 阳志平的博客 的介绍极接地气和系统。
* Reeder 用于 RSS 订阅。
[image:0FA6109F-A741-411C-92AF-1FEC8871775A-84485-0000F25C74551C80/屏幕快照 2016-12-14 上午11.26.10.png]
* PDF Expert 用于 PDF 批注。
* Alfred 用于搜索、启动应用和一些简单脚本，例如开启 Aria2、查找豆瓣评分、知乎搜索。

学习
* Coursera， Udacity 和 edX 是我系统学习输入的主力，暑假拿了两张证书，完成了 Python 和单变量微积分的学习，接触了很多经济学、认知科学、计算机科学的知识 -（然而并没有完成）- 。
* Kindle 依然占我阅读的大头，依然觉得自己一无所知，今年包了 Kindle Unlimited。我喜欢把 Kindle 用于不需要精读的内容，今年非虚构类主要大量接触了创业、产品管理、项目管理、自我驱动、设计、哲学方面的知识，虚构类最爱的是火星救援、月亮和六便士、人间失格。

娱乐
电影
你的名字、神奇动物在哪里、比利林恩的中场战事、独立游戏大电影、路边野餐是我 2016 年 TOP 5。
二刷的有你的名字、美人鱼、功夫熊猫3（春节实在太无聊了)。
今年还去了上海电影节，塔科夫斯基的电影实在太难看懂了。
音乐
* 口味基本没怎么变，今年最爱的乐队是 Chinese Football 和草东没有派对。
* 两场音乐节南京森林和宁波草莓，三场 Livehouse，大波浪、MONO、肆囍。下一次 Livehouse 就是明年的大象体操了。
游戏
没时间打游戏，今年通了神秘海域4，半途而废的有 Braid、Inside以及其他好多没印象的。

知识（文献）管理
要用的知识太多，随手收藏的知识容易忘，放文件夹里缺少标签和标记，word 里插 citation 是车祸现场，所以今年开始使用知识和文献管理。
* Endnote，因为学校电脑里有 Endnote，所以写论文时的文献管理的主力还是 Endnote，我把 Endnote Library 放到学校邮箱的 OneDrive 上，基本上在机房写作的工作流就是登录 Chrome、登录邮箱、打开 Endnote、开始写作。
* Zotero，我的主力知识管理软件，Endnote 太大了，还收费，我的 Zotero 用于保存我会时不时查找和翻阅的知识，如图所示，效果拔群。
[image:966BE8AE-AFA9-4120-AFD9-8550397FF06F-84485-0000F1EC79E438A8/屏幕快照 2016-12-14 上午11.26.23.png]
* Trello，项目管理、项目 wiki 都放 Trello 上，太好用了，人类的希望。
[image:43C9FF15-1B7F-4B8D-87E6-219E2560E7A2-84485-0000F266EE23727D/屏幕快照 2016-12-14 下午12.24.16.png]

写作
* Bear, notes for iPhone, iPad and Mac，我尝试过无数的写作工具，包括 Ulysses，Mou，Typora 等等等，在今年大部分时间我都是使用 Dayone 2 写作，直到我用了 Bear。写作工具这东西确实比较私人，我是觉得一定要不断地找才能找的到。
* Trello，卡片式写作。
* 石墨文档，用于团队文档的协作。

发布
* 对朋友圈有洁癖，不想打扰人，所以朋友圈只发真正有价值的东西。
* 学了 Python，然后用 Python、Pelican、腾讯云服务器搭了自己的博客（lijiawei.cc）。
* 

#博客 #总结

卡片式写作
我为何写此文？
纳博科夫，一位科学家、文学家、极客，他创造的独特的卡片式写作法，用卡片的形式代替传统的一本道写作，我在第一次接触后大为震撼，此文章就是我第一次使用卡片式写作法写就，耗时 4 小时左右，从来没感觉写作可以这么酣畅淋漓。下图就是我使用写作软件的截图。

[image:132AD83F-84FB-4726-81F2-639E2B76B19B-1727-000007508DB0EFDB/屏幕快照 2016-12-14 下午9.29.21.png]

卡片式写作法概况起来有以下好处：
* 资料收集，帮助记忆。
* 快速写作，构思先行。
* 减少畏惧，力注卡片。
* 远距联想，卡片交互，新思迸发。
* 组块思维，理顺逻辑。

在此文中，我主要查阅了一下两篇文章，此文算是笔记加上我自己的补充，我强烈推荐各位读读这两篇原文：
阳志平 - 纳博科夫的卡片
像纳博科夫一样写作：卡片创作法

基本流程
* 准备好卡片创作工具
可以去淘宝上买索引纸和铅笔，但对我来说，电脑是最好的写作工具，我会再补充我如何使用电子设备进行卡片式写作。
* 撰写大纲
> 作品的构思先于作品本身。就像玩字谜游戏，我随意在空白处填写。我在卡片上写下这些段落，直到完成整部小说。——纳博科夫
卡片课分为两种，大纲卡和拓展卡。卡片创作的第一步就是创作大纲卡，在写大纲卡时，思考以下这三个问题：
	* 为什么要写?
	* 读者是谁？
	* 预期结果是什么？
* 拓展要点
注意在拓展卡中使用湿货。
* 编辑成文
拓展卡完成后，再将各个拓展卡拼接起来，纯拼接不难，拼接得好看就需要能力，这种拼接的能力就是远距联想能力。
* 检查修改

卡片信息化
我不是特别喜欢纸笔，易丢，不好保存，不方便更改，20世纪的纳博科夫是使用索引卡和铅笔撰写作品的，而我目前正在探索我的卡片式写作的信息化流程。

工具与环境
目前我使用的写作工具和环境如下：
* 写作软件，Bear。出色的设计和跨平台性能，虽然目前有几点小瑕疵，但已经能很好地达到我的要求。
* 写作软件，Trello。Trello 既是一个项目协作软件，也是个出色的卡片面板，虽然现在的写作主力不是 Trello，但 Trello 面板更容易让我看到全局，这是 Bear 比不上的。
* 知识管理软件，Zotero。收集资料里能浏览器里一键放入资料库，我在收集、阅读一部分资料后也会在 Zotero 中写一句话总结。
* 写作硬件，Macbook Pro+外接显示器+蓝牙键盘+ iPhone。Macbook Pro 是我的写作主力，即便现在 iOS 的生产力已经不错，但电脑的大屏幕依然给我相当的安全感，iPhone 的便携性可以帮助我捕捉灵感，随时写一点东西。
* 大部分时间，我都在宿舍里写作。

信息化流程
* 浏览资料，有时候该步骤可以跳过。主要是通过互联网，比较好的资料就收藏进 Zotero 中。
* 有大致概念后，开始撰写大纲（大纲卡）。
* 按照大纲，在 Bear 中创建含标题的笔记（拓展卡），并打上标签，方便识别层级顺序。
* 不断捕捉灵感，在写作时总是发现大纲中可能没有的东西，这些灵感会继续转换成新的笔记或者是一篇新文章。
* 拓展卡基本写满后，寻找各个笔记间的联系，并通过 Bear 的跳转功能插入到笔记中。
* 整理，修改，发布。

背后原理：组块化
当我们只看一个概念时，我们肯定是毫无头绪的，但是当我们专注地（而不是发散地）把相关的概念一一梳理，把所有概念整理成一个整体，也即是组块时，我们的大脑会更加适应也更容易处理。卡片式写作恰好顺应了这个过程。

必要难度
> 人们常通常认为，记得越快，就是学习效果越好。简而言之，存储越容易，提取就会越快。但是近些年，最新实验发现了与常识相反的结论：存储与提取负相关。
> 
> 也就是说，存入记忆容易，提取出来会不容易；反之，如果你有些吃力地存入，那么，提取会更牢。比如，我们的常识是要在课堂上记笔记。但是必要难度原理建议，别在课堂上记笔记，老师边讲边记笔记，你会听得太明白，写入太容易，但是大脑那块硬盘未来会不易提取出来。过些日子，多数遗忘。反之，如果我们略微增加一下写入难度，比如晚上回到宿舍或者第二天再写笔记，这样未来提取会更容易。也就是，你有些困难地存入，会记得更好并真正学会。——阳志平
必要难度可以视作组块理论的记忆运用，当我们使用容易的方式记忆时（分神、多任务等等），我们获得的概念并没有被大脑专注地处理，也因此无法形成相应的组块。相比于拍照、复制粘贴，卡片式写作要求我们用更大的难度收集、记录资料，这会使我们更容易记忆。阳志平的原文里给出了钱鐘书的例子，值得一看。

抽象层级分解
根据组块理论，我们的大脑更喜欢「把一些有关联的东西加以分类或加工使之成为一个组块」，因此我们做任务、解决问题时倾向于把任务、问题层层分解，使之变成一个个空白的组块再向这些组块里填充内容。我们的大脑也更适应处理同一抽象层级的事情，即写大纲时专注于文章构思，写拓展时更关注于某一张卡片上的内容。卡片式做法顺应了这方法，当我们把注意力集中在一张张卡片上时，干扰因素更少，更专注于填充该卡片的组块，并且创意密度会更大。我个人经验里，卡片式写作减少了我的写作恐惧，我更愿意舒舒服服地写几百字，而不是一下子就写满几页，并且当我看到我已经写了这么多字的时候，我会自我安慰「看我都写了这么多字了，应该差不多了吧」。

卡片式写作的缺点
* 组块与组块之间的联系不够，需要后期润色加工。
* 需要极强的联想能力，为什么这个卡片可以和那个卡片联系？然而思考这个问题的时候，作者处于极度疲惫的状态。

我认为卡片式写作应该多放几天再发布，因为不是一本道式酣畅淋漓地写就，因此修改需要大量的时间。

参考资料
阳志平 - 纳博科夫的卡片
陈素封 - 像纳博科夫一样写作：卡片创作法
采铜 - 思维运筹学导论（实践篇 · 组块化 · 上） - 开放的智力
采铜 - 思维运筹学导论（实践篇 · 组块化 · 下） - 开放的智力
Coursera - Learning How to Learn Week 2
 #总结 #卡片/卡片式写作 #博客

使用树莓派实现 HomeKit 控制台灯
在看到少数派上的 借助树莓派与 HomeBridge ，将 YeeLight 彩光灯接入 Apple HomeKit 一文后, 非常心动. 在暑假的时候关注过一阵子 yeelight, 那时实现的功能非常有限还不支持 IFTTT 就作罢没有买, 但到了12月后, yeelight 既有 IFTTT 又能玩 homekit, 于是立马下单了树莓派 3 和 yeelight.

树莓派可以理解为一台微型电脑 (开发板), 运行的是树莓派定制的 Rapbian, 虽然树莓派并不是性能最强也不是最有性价比的开发板, 但它的社区支持是最友好的 (毕竟面向的人群还包括儿童), 它出的杂志 MagPi 极度令人沉迷 (甚至能让我回忆起从前看大众软件的时光), 官方的教程和文档对新手非常友好 (只需要一点点英语基础就够), 作为对比让我们斜眼一下 DragonBoard 410c, 任何出现的问题只要 Google 一下 Raspberry Pi + 关键词都能找到, 其配套的硬件软件也很出色, 例如 sense hat 可以直接配合自带的 sense hat emulator. 因此非常推荐任何对编程感兴趣的人入手.

本文用到的硬件如下:
1. 宜家 E27 螺孔台灯 RMB 99
2. yeelight 彩光版 RMB 89
3. 树莓派 3 Model B (同时配了外壳和散热片) RMB 206
4. 预先烧录好 NOOBS 的 Micro SD 卡
5. 网线
6. 有线鼠标
7. 戴尔显示器
8. Macbook Pro
9. iPhone 

配置树莓派
参考官方指南 Raspberry Pi Software Guide 烧录 Micro SD 卡. 把下载好的 NOOBS for Raspberry Pi 解压缩然后拷到 SD 卡上. 当然, 也可以直接烧录 Raspbian 到 SD 卡, 这样就不用忍受 NOOBS 安装的漫长时间, 直接插卡就能开机.

插入有线鼠标 (带 USB 发射埠的无线鼠标也可以, 凑活用就好, 之后可以在 Macbook 上使用 SSH 操作), Micro SD 卡, HDMI 线, 网线, Micro USB 电源, 然后就可以安装 Raspbian, 安装完毕后就能进入系统.

进入系统后, 点击左上角 Preferences - Raspberry Pi Configuration, 打开 SSH 和 VNC. 建议在这里顺便更改用户密码.

这时候就可以切回 Macbook, 打开终端 (我使用的是 iTerm2), 输入代码 ssh pi@raspberrypi.local 然后输入树莓派的密码, 连接树莓派.

[image:692DD552-8F1C-41AD-8C1A-27ADB0C8DFDC-40446-0000A5FB59E58F6C/QQ20170105-1.png]

更具体的操作方法, 请参考官方帮助页面 Raspberry Pi Software Guide.
 
更换国内镜像源
由于国内访问树莓派服务器的不便, 因此需要更换为国内镜像, 这里我将 sources 的镜像更换为速度更快的阿里云, archive.raspberrypi.org 的镜像只找到中科大的, 因此使用了中科大的镜像.


sudo nano /etc/apt/sources.list
# 用 # 注释掉原有的 source, 输入阿里云镜像.
deb http://mirrors.aliyun.com/raspbian/raspbian/ jessie main non-free contrib
deb-src http://mirrors.aliyun.com/raspbian/raspbian/ jessie main non-free contrib


[image:6DECAE87-3E7F-4555-BA65-9648E2235FF2-40446-0000A63FC90B5795/QQ20170105-0.png]

更换中科大镜像的方法一样, 但文件位置及名字不同.


sudo nano /etc/apt/sources.list.d/raspi.list
# 注释掉原来的, 输入中科大镜像
deb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ jessie main ui


[image:33461DDB-CB8F-4288-9198-3AFC920EBE1D-40446-0000A6557F791F9A/QQ20170105-2.png]

更换好源后, 输入以下代码就可以不用忍受龟速更新系统了.

sudo apt-get update
sudo apt-get upgrade


安装 Node.js 及相关依赖
Homebridge 是一个用 node.js 开发的 HomeKit 服务器, 因此需要参考 Running HomeBridge on a Raspberry Pi 在树莓派上先安装 node.js, 由于国内网络问题, 仍然需要更换镜像.


curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
# 更换为国内源
sudo nano /etc/apt/sources.list.d/nodesource.list
# 输入清华大学镜像
deb http://mirrors.tuna.tsinghua.edu.cn/nodesource/deb/ jessie main
deb-src http://mirrors.tuna.tsinghua.edu.cn/nodesource/deb/ jessie main


这时候就可以安装 node.js 以及其相关依赖了.

sudo apt-get install -y nodejs
sudo apt-get install libavahi-compat-libdnssd-dev


安装 homebridge 及相关依赖
Homebridge 属于 node.js 下的模块之一, 这时候需要用到 npm 安装, npm 的速度也是很令人着急, 但好在 npm 可以使用代理, 这里我们使用淘宝镜像下载 homebridge. 本步骤比较繁琐, 依旧参考 Running HomeBridge on a Raspberry Pi.

# 在命令后添加 --registry=http://r.cnpmjs.org 使用国内 npm 镜像代理
sudo npm install -g --unsafe-perm homebridge hap-nodejs node-gyp --registry=http://r.cnpmjs.org
cd /usr/lib/node_modules/homebridge/
sudo npm install --unsafe-perm bignum --registry=http://r.cnpmjs.org
cd /usr/lib/node_modules/hap-nodejs/node_modules/mdns
sudo node-gyp BUILDTYPE=Release rebuild


这时候可以输入 homebridge 测试能否正常运行 homebridge, 如果一切顺利的话, 能看到 homebridge 一直运行且没有报错, 打开手机的家庭 app 添加配件就能看到 homebridge.

安装 homebridge-yeelight
记得打开 yeelight 的极客模式, 最新版本 (0.0.1.4) 的 homebridge-yeelight 已经不需要更改 config.json 了, 因此直接输入以下代码就完成了配置, 能在手机里添加台灯了.

sudo npm install -g homebridge-yeelight --registry=http://r.cnpmjs.org
homebridge


开机启动
Running HomeBridge on a Raspberry Pi 上给出的添加启动项实在是太繁琐了, 我甚至因为这一步没弄明白重新刷了次机, 还顺便搞懂了.bashrc 和 rc.local 有什么区别. 事实上, 树莓派文档 Scheduling tasks with Cron  给出的方法是最简单且方便以后配置别的程序的.

# 先安装 cron
sudo apt-get install gnome-schedule


然后配置 cron.

crontab -e


在最下方添加 @reboot homebridge & 即可完成开机启动 homebridge 的配置. 再多嘴一句, cron 这个命令非常好用, 在 system tools 里有 GUI 界面, 还能让树莓派完成每周日运行 sudo apt-get update sudo apt-get update 这样的定时任务.

参考资料
(树莓派官方的资料真的非常友好)
Scheduling tasks with Cron - Raspberry Pi Documentation
Raspberry Pi Documentation
借助树莓派与 HomeBridge ，将 YeeLight 彩光灯接入 Apple HomeKit | Matrix 精选 - 少数派
小米网关接入Homekit完整教程，声控家中设备! - 小米社区官方论坛

#博客

QM 自学指引
大家今天上完 Paolo 的 QM 感觉酸爽吗？

我在看完这门课给出的课件后倒吸一口凉气，把大学半学期的微分课程压缩到4小时讲完，lecture 上 Paolo 给出的 module outline 也不知道大家有没有什么概念，单变量和多变量微分、优化、概率论、统计齐了，虽然没有线性代数和积分，但在我看来这样的安排已经够恐怖。

如果你是理科生，那么微分 Lecture 1 和大部分概率论应该没什么特别大的问题（只要你没忘），提前浏览课件，自己证明一下，然后把不会的标注出来或者自己 Google。

如果你是文科生，我觉得基本是完了。这门课太紧凑了，5分钟给完证明然后接下来5分钟就讲推论，证明的解释有多反人类我就不说了，证明过程也不给多少时间思考，证明完也不练习，安排太不合理了，大家期末写 feedback 的时候提一下吧。

当然，不管你高中的基础如何，第一周 lecture 后应该还是要跪，鄙人因为酷爱写代码在大二上学期的时候自学了微积分（上完第一节课已经默默开始自学统计学了），就不识好歹地在这里写个自学指引（优化我还没接触，就不放了），让我们一起开开心心地被数学和 Paolo 虐。

微积分
最好的学习方式是公开课，我不太建议看书，因为公开课是用动画、板书配合讲师讲解，理解效率会比较高。教科书给出的证明更适合已经入门的人，也更加严谨，我一般想不起来证明的时候才会翻书。

单变量和多变量微积分

MIT: 18.01.1x Calculus 1A: Differentiation
这门课只有4单元，一个单元接近2小时，讲得太好了，基于直觉，引人入胜。把微分讲得透透的，每一步都有严谨有趣的证明，甚至包括 e^x 的导数为什么是它本身，还讲了多变量微分中的 implicit differentiation 和一点点微分方程。

泰勒展开

泰勒展开可以把任意函数用多项式表示，比如三角函数 sin(x) 的展开就是这样：

数学家之所以发明了这个方法，是因为研究多项式能大大简化工作。

单变量微积分：第一部分
这门课虽然也是微积分导论课，但直接从泰勒展开切入，视角独特，但不是很出于直觉，整个推导都是基于欧拉公式。

MIT: 18.01.3x Calculus 1C: Coordinate systems and infinite series
是 MIT 单变量微积分第三部分的课，我没上过就不评论了。

如果你需要一本教科书

知乎上有蛮多推荐的，大家还是找最适合自己的，比如你觉得北大的数学分析简洁干净习题难那我也觉得蛮好的。

普林斯顿微积分读本
好书，哪怕你没有三角函数的基础（或者基础忘光了），你也可以入门，里面包含了泰勒级数的内容，如果你觉得实在没时间看公开课的话，用这本学也不是不可以。

Calculus by Ron Larson, Bruce H. Edwards

在知乎上被赞誉为「被多数学生评为最适合自学的微积分教材」，我的感觉是 -图片还是蛮多的- 字体舒服阅读体验好，不过大部分英文原版教材都不错啦，大家去图书馆随便借本也够用的。如果你喜欢电子版的话，试试 jiumodiary.com。

统计
编程相关

如果你有编程基础或者学习一点点编程（R 语言编程非常简单我保证），UTAustinX: UT.7.11x Foundations of Data Analysis - Part 1 和 UTAustinX: UT.7.11x Foundations of Data Analysis - Part 2 是评价最好的，20小时的内容包含了统计和 R 语言入门，Lab 体验超棒。

如果你更喜欢用 Python，那么还有 MIT: Computational Probability and Inference。

无编程背景

斯坦福公开课 Probability and Statistics，课程内容不错，体验也不错，如果不想编程的话可以试试。

NotreDameX: SOC120x I Heart Stats: Learning to Love Statistics，看名字似乎比较适合入门，但没有概率论的内容。

如果你想更深入的学习概率论的话，试试 MIT 的 Introduction to Probability - The Science of Uncertainty ，有博文评价此门课程「It is a masterpiece with a weighted average rating of 4.91 out of 5 stars over 34 reviews. Be warned: it is a challenge and much longer than most MOOCs」。

最后警告
如果你是高中理科基础，那么自学 QM 至少得花60小时以上，先花一周搞定较简单的微积分，然后再按照 QM 课程安排规律地学习泰勒级数、概率和统计。

如果你是文科生，建议现在就开始自学并且多多练习抱好大腿，这门课的安排实在太紧凑了。

对了，如果你点击「阅读原文」，你就可以跳转到我的博客，所有红色字体都是超联机，点击超链接前往相关网站。






#公众号 #博客


为何以及如何系统地增长知识
本文系以下文章的摘抄、思考、总结：
如何系统地提高自己的智慧？
如何系统地提高自己的智慧：思考的游戏
The Wrong Tail

为什么我们要系统地增长知识
2013年的一次访谈中，主持人问巴菲特和芒格，为什么他们可以远超同龄人和竞争对手。芒格说：

> 因为对于那些本来比我们聪明的人，我们学到了变得比他们更聪明的方法。

我对于中国教育的一个很反感的一点就是标准化、不留下自主学习的空间。我在高中、初中所有学到的知识都是和别人一样的，所有人学同样的东西看谁学得最好。

这个方式是公平 (equal) 的，但没有效率 (efficiency) 。首先我们的学习容易受考试影响而停滞。大部分人的学习是为了一个很短视的目标——高考，这就导致我们培养出很无意义的竞争意识——无论如何都得取得高分，而非提升自我，而当我们的学习成果无法被量化、无法被比较或是考试结束，我们的学习（例如阅读、计算机、音乐、美术、体育等）便开始停滞。其次，传统教育是对才能和天赋的浪费。如果我们假设每个人生而不同、且随着学习能不断发展自身，那么每个人的一生的技能树都是完全不一样的，标准化教育必然无法因材施教，这就导致了才能和天赋浪费。

要逃脱这个陷阱，要想清楚“为什么学习”以及“为什么要系统地学习”。

为什么学习？我的观点如下，暂时不展开：
* 为了更好地了解世界。
* 为了更好地使用工具。
* 为了更好地发展自己。

为什么要系统地学习？为了建立思维模型，方便以后调用，同时这样的积累会使知识积累指数级增长，充实我们解决问题的工具箱。模式和现实的关系如下图所示。
!智慧随年龄增长的曲线

什么是思维模型

> 一个思维模式就是帮助我们更好的理解世界运转规律的想法。一个思维模式往往阐释了结果，并且回答了像“Why”和”How”这类问题。

比如“社会认同”（心理学的一种理论）这一模式告诉我们当人们不确定时，他们经常自动选择模仿其他人做的事情，而不会想真正正确的事是什么。这样的理论解释了人们为什么做（Why），同时预测了在特定情景下人们又会如何做一件事（How）。

如何系统地增长知识
质疑思维定势
> 智慧的第一步是学会质疑，质疑会把我们引向问题，问题会把我们引向真理。
——法国哲学家 Pierre Abelard

不要过于执着于思维模型，而忽略了真实世界。任何模型都有局限性。

建立简化的模型
可以分类，例如我看到了这篇如何系统地提高自己的智慧？，我把这篇文章归类为思维方式，然后再和我以前了解的教授思维方式的 Mineva School 比较。可以是一个模糊的概念，比如百事可乐，没人能准确地描述百事可乐，但百事可乐给消费者灌输的概念就是年轻人的可乐——《定位》一书就讲了营销是怎么找到这个概念的。现实和模型的关系如下图所示。
!现实和模型的关系

演绎和归纳
把显性知识转换成脑子里的隐形知识（归纳），再把脑子里的隐形知识用写作的方式变为显性知识（演绎）。

> To think is mostly about using and producing mental models.
思考大概就是使用和建立思维模型的过程。
——Luc De Brabandere "What Managers Can Learn from Philosophy"

要有多个模型
#博客 #思考 #总结

中场休息
2006年我父亲在杭州与人合开门诊，他负责泌尿方面的，亏得血本无归，于是转而给开整形科的合伙人打工，做管理和销售，门诊改名了叫整形美容医院，现在满大街都能看到的大部分整形美容医院都是差不多那时候的莆田人起家的。

2009年，我去了杭州，平时住在学校，周末回家。我初一的时候，我父亲还是单身，换了一两个女朋友，住一室一厅的单身公寓，周末白天他去工作，我一个人自由安排我所有的事情，没人管我，晚上他会带我出去吃饭，然后我们在同一张床上躺着睡觉，我父亲在我青春期扮演着非常伟大的男性榜样，蛮严肃，可能销售和领导当习惯了话超多，特别爱讲道理和鸡汤（我非常顺从地表演自己很受用的样子），领导力爆棚，在医院处理事务时风度翩翩，在我小学去看我父亲的时候，我最爱做的事情就是在我父亲的庇护下溜到市场部玩电脑。

初中我去杭州后，我父亲依然很喜欢换手机。他在08年手机换了 iPhone 一代后，09年我来杭州后他把 iPhone 送我，换了诺基亚，但他还是特别喜欢苹果，我那台索尼笔记本虽然被我加了好几根内存条但也差不多该退休了，显卡厂商还叫 ATi 显存只有32M能想象吗，于是他买了台苹果笔记本放家里，从此这台 MacBook Pro 2009 Early 陪伴了我7年，除了前年键盘进水换了键盘外没有其他维修记录了，每年我会把风扇拆出来把灰尘吹掉，12年左右把机械硬盘拆了换成 SSD，有时候去电脑城顺便换 CPU 导热胶，我今年寒假去香港的时候才换了 MacBook Pro 2016，我父亲让我把老电脑卖掉，我说没人会要的，就一直留着吧。

初中三年是我最悠闲的时光，周末我一般干三件事，上网、打游戏、骑自行车逛杭州市区。本来小学还有读书的习惯，初中三年读书不超过10本。这段时期也发生了不少有意识的事情。

第一件事，厌学。家里没人管我，但我的成绩基本保持年级前80，按我们学校的情况，年级前40能去杭州最好的3所高中，年级前120能去中等偏上的前八所。所以说我的位置就比较尴尬，老师们总觉得我可以更努力冲一下前三所，但我又不想努力，这种矛盾在初三彻底爆发了，因为初三的时候，年级前100会去年级最好的两个班，我进了，但我真的一点都不用功，而且我咬牙切齿地不喜欢有人逼我用功。我的英语老师非常不待见我，说我「吊儿郎当」，但我的英语完全靠语感做题，我拒绝做我觉得毫无美感非常枯燥的英语单选题，120的试卷我照样能上110。其实讲道理我不做任何课外习题，因为我觉得不够优美，没有触到学科本质，例如语文的阅读理解，这还是欣赏文学吗？但我那时候哪知道研究什么学科的本质呢？我觉得这样不对，这样没有意思，我就不做。我最喜欢的学习方式是一言不发地花几个小时研究一道永远解不出的数学题，不求解出，单纯享受思考和试错的乐趣，但很不幸，我们的教育系统不允许我这样做，我在初三被逼着做《实验班》这样的习题册，数学老师抓着我每周五必须去他办公室问问题，我去了一次就再也不去了，因为如果我想不出来的问题被老师提示了解题路径，那么这个问题还有什么意义呢？如你所料，我的数学发挥超级不稳定，题目对我胃口就拿高分，不对我胃口就低分，对了，我小学做竞赛数学就这样了，题目对胃口我可以省比赛拿奖，不对胃口一般难度的课堂练习我一道都做不出来。对于我这样的不稳定体质，很自然地我不是班上的尖子生，而是老师最头疼的人，而且我还没人管。2012年的中考对我来说是滑铁卢，我的英语听力几乎没拿分，我极度怀疑我的考场设备有问题，那年听力的语速非常快，但音响的爆音非常严重，我的英语听力又不是特别好，想想也知道我绝对不会在课堂外做听力题的，后来我去杭州前八所中的一所。

第二件事，批判体制。我初二就开始翻墙，那时候只要改 hosts 就能去看 YouTube，看了大量广场和文革的文章，看了《1984》，看了很多网易新闻及其评论，那时候还接触了《南方周末》，是一个喜欢韩寒的朋友推荐我的，对了我初一还是初二买了韩寒出的那本绝版《独唱团》，高中时搬家遗失了，那时候我看《独唱团》根本看不懂，只记得莫名其妙一个人爬到国旗杆上，一个叫罗永浩的人，金圣叹喜欢花生米和火腿肠一起吃，所以被我或是我爸扔了也正常。那时候的《南方周末》是中国最自由派的媒体了，初三的时候，我的语文老师，张老师，让我们每周做书摘，于是我每周都是摘《南方周末》然后疯狂地用垃圾文笔指责政府，张老师是我这辈子最敬重的老师，她做的不是训斥或者别的，而是安静地听我抒发观点然后写上一些评语。后来顺理成章地我变成自由派，我身边大部分自由派朋友都因为南方周末，虽然我给自己找了很多理由我为什么是自由派，但现在想想我应该就是被南方周末洗脑了。

第三件事，享受黑客的乐趣。我初一的时候拥有第一部手机，iPhone 一代，在同龄人里算是少有的吧，我拿到手机的第一件事，就是把系统更新了，然而我没想到的是那时候所有的 iPhone 一代都是 AT&T 签约机，必须要破解系统才能用中国运营商的卡，然后我开始搜索大量网上的教程，刷机、解锁、安装 app，那时候 iPhone 最火的游戏不是阴阳师或者天天酷跑，是一个平衡球的游戏，你有一个球和一个迷宫，因为 iPhone 有重力感应功能，玩家要让手机稍微倾斜使球滚过各种障碍物，最后到达终点。那时候 iPhone 购买应用和游戏必须要用信用卡，而我又没有，只能装盗版，所以我得越狱才能安装应用。iPhone 破解叫越狱（JailBreak），可以让 iPhone 绕过苹果系统的诸多限制，例如盗版软件，iOS 3 时代有个黑客天才叫 George，他破解了大部分 iOS 3 之前的系统，破解软件大部分以 ra1n 结尾，比如 blackra1n 这样的，后来他被苹果招安做安全工程师，现在创业开发无人驾驶，后话了。iOS 4 的破解是最酷的，是直接在 iPhone 的 Safari 上进入一个网站，滑动滑块然后网页上运行代码破解 iOS 系统，太简单优雅了，以至于那时候 Apple Store 的 iPhone 都被人神不知鬼不觉地破解。那时候 iPhone 所有我看得上的玩法我都玩过，什么改主题，改运营商标志，我最怀念的是 zeypher，这个软件包能实现屏幕滑动边缘切换任务，底部向上滑动退出，彻底解放 home 键，是我 iOS 必装 top 3，后来 iOS 引入控制中心，这个软件包就没用了。说实话那时候玩得最多的还是 iPhone，电脑只有周末能玩，电脑上主要装盗版单机游戏，网游打多了会腻，单机游戏的剧情代入感更强（我是个很看重代入感的人），我接触的第一个单机游戏是《使命召唤6：<del>线代</del> 现代战争2》，这是游戏史最伟大的单机游戏之一，被震撼得没话说，心想我骑两个多小时自行车去买的盗版碟太值了，接着又玩了《使命召唤4》，切尔诺贝利那关太他妈牛逼了，前半部分全程狙击战就不说了，中途我的上司 Captain Prince 负伤，我得背着 Price 拿着手枪冲到直升机降落点，我能非常深切地感知我身体的肾上腺素在上升，而这种体验我现在都很少体验到了。

第四件事，青春期。




#卡片/自我

游戏开始
1996年12月4日，我出生在福建省莆田市东庄镇棣头村 一个普通农民家庭。

1996年的东庄镇充满着去外地闯荡的风气，那时的中国刚刚开放私营医院和允许承包公立医院的科室，于是有人想到了做医院，做得还行（黑心倒是真的），我的父亲也随着大潮在97年北上江苏一个小城市泰兴，在国庆新村和别人合开了「国庆诊所」，也顺便带上了我的母亲和三个月的我。

我童年里对于父亲的印象近乎不存在，一是父亲大部分时候都不在家，他只是个碰巧成年成家的孩子而已，丝毫没有教育和亲子的概念，二是父亲在我五六时去了另一个小城市靖江做诊所，偶尔才回来一次，我和母亲偶尔去看他一次。我小学三年级时，我爸去了杭州，就几乎不回来了，我和我母亲每年去杭州两三次。

我的母亲形容我小时候「内向、不爱说话」，我两三岁时，最爱的就是收集一抽屉的瓶瓶罐罐、香烟盒，然后配合我的玩具——一只塑料小狗——编各种奇怪的故事，即便我长大了我也喜欢把自己代入到动画片、电影里编故事。我母亲那时候就当家庭主妇，又闲又有耐心，看各种育儿书和言情小说，也不知道哪个看得多点。每次我给我母亲讲我新编的故事（当然，那时我只会和我母亲说话）时，我母亲会安安静静地听我讲完，然后夸我，天哪，虽然我的童年一点也不富裕，我母亲很少给予我物质奖励以致于我至今没有吃零食的习惯，但我依然确幸我是这世界最幸运的人。

在上幼儿园之前，我去了一年托儿所。刚开始在 A 托儿所，A 托儿所是个家庭托儿所，就像家庭手工作坊，没什么教育背景，只是个管孩子的地方，我记忆尤新因为那里的午饭非常难吃，我的母亲问 A 托儿所的老师她儿子的情况如何，老师会摇摇头说这孩子以后学不好，都不讲话。然而，我母亲十分确幸她儿子聪明得很，只是内向而已，于是她把我送到 B 托儿所，B 托儿所是一名幼教老师开的，我母亲告诉我，我一送去后，老师就夸我聪明，学得很快，于是她决定让我就一直待在 B 托儿所。

我从小学东西很快，尤其是如何在新手机上玩到新游戏这点。在 2000 年以后，手机终于成为了人们的日常用品，在我童年时，我父亲虽然没钱但非常热衷于购置数码产品，尤其是手机，于是我就有很多机会玩新手机，摩托罗拉的 V998、V3，诺基亚的 N 系列我几乎都摸过，任何一款新手机我都会迫不及待地打开菜单然后玩游戏，我非常喜欢尝试各种新选项，对了你们知道 SIM 卡有 PIN 码这东西吗？我想我很小的时候就知道了，还有 WAP 上网，估计坑了我妈不少钱吧，任何功能我都能摸清楚，它们就像我更小时候的抽屉里的香烟盒，我喜欢它们，即便现在的我和当时的父母都不能明白。我记得在我小学五六年级的时候，我爸的手机是 iPhone 一代，让我最震撼的不是滑动解锁，因为所有手机解锁的方式对我来说都很出于直觉，而是 Safari 和应用商店。我小学四年级左右的时候，我爸把他的索尼笔记本给我了，可能这样他就有理由换电脑玩空当接龙了吧。

回到主线，幼儿园和小学。除了学东西很快以外，还有不少有意思的东西。第一件事情是，讨厌升国旗做早操，我的幼儿园在每个周一都要升国旗和做操，我想对于任何一个孩子来说，尤其我非常没有运动欲望，听国歌站着都是一件很累的事情，所以那时候我对于升国旗做早操这件事情非常不耐烦，这种不耐烦一直贯穿了我整个人生。

第二件事情，怕老师。一方面我老师确实知道我聪明，我比同龄人早很多就会看钟表的指针，但另一方面，学校这种要和同学、老师接触的场所让我非常恐惧，我从小在人多的地方就一言不发，不会和任何人交流，之所以我会在课堂上发言完全是因为我母亲一直在鼓励我。幼儿园还发生了一件事情让我彻底摆脱不了这种恐惧。因为我长得很高，我和我幼儿园的好朋友姚星辰三年都坚定地坐在最后一排，有天做操的时候，我和他也不知道怎么回事挥到了后排的鱼缸，可能是出于做错事情的恐惧，也可能是被老师骂或者是感知到老师的愤怒情绪，从此以后学校和老师就在我心理留下阴影了。关于这个，我的小学还有更深的阴影，我的小学地处小城，老师的待遇自然一般，于是老师和家长间就默认了一条潜规则：送礼，我母亲觉得送礼非常荒谬，都给学费了怎么还要送礼呢？于是我的小学就处于一个很尴尬的地位，我的成绩很好，我的同学们很乐意投票让我做三好学生和班长，但我的一部分老师没收到礼金就不打算对我好，总之对待我的语气非常尖锐，这种割裂我不知道具体产生了什么影响，也许自卑有一点吧，但我知道这是我一辈子都无法摆脱的，我每次想到这件事情都会觉得受到不公平的对待，即便我的小学遇到了特别多的好老师，但我依然忘不掉这些事情。

第三件事情，不爱集体。大概四五年级开始，每年都有年级联赛。四年级是足球，我当守门员，我扑了不少好球，我给的大脚也还行，但是在激烈的最后晋级阶段，我在禁区外捡球了，我当时根本不知道规则，我就以为守门员可以在任何地方捡球，后来对方点球得分，我们班输了，以我当时爆棚的集体荣誉感，我真的为此失落了好久，从此很少踢球。五六年级联赛是篮球，五年级时，我因为身高优势去当中锋，依然是一场激烈而焦灼的比赛，我的鞋带散了，于是我很自然地在场上系鞋带，我的老师责怪我说，这么紧张的比赛，你怎么可以系鞋带呢？我大脑一片空白，我不知道为什么我不可以系鞋带，对了，多年以后我在回想这个事件时，我开始怀疑我是不是有阿兹伯格综合征，当时的我对于激烈的氛围毫无感知，我真的只是想系鞋带啊好不好，我之所以现在举止正常是不是因为环境逼迫我用智力模拟情商呢？我不知道。篮球赛之后，我依然还是打球的，毕竟是少有的体育课活动之一，我虽然得分很烂，但我身高够高弹跳很好，所以主要做防守，但小学的时候，大家都不喜欢擅长盖帽的人，所以我就很自然地被排挤到第二梯队了。也许是怕老师和不爱集体的这些事情凑在一起，小学毕业后我彻底与集体割裂。

第四件事，互联网和电脑。我的小学是有计算机课的，运行的是 Windows 2000，学的语言是 Turtle，就是小海龟，用编程指令指挥小海龟画图，不知道是因为计算机课被占还是编程太难，印象里我连基本的循环指令都没学，编程课好像就没有了，取而代之的是金山打字和浏览网页。我的胖子同桌套路很深，反正我印象里我在计算机课浏览的网页都不是正经内容，恰逢那时候艳照门，于是我就莫名其妙被性启蒙了，从此我的电脑开始疯狂地中病毒，于是多了重装系统和清理木马的经验。除了性启蒙以外，互联网给我带来的还有... （我使劲想想）… 音乐，我小学时很喜欢流行音乐，听了大量的流行，刚开始是华语，罗志祥林俊杰周杰伦蔡依林飞轮海南拳妈妈许嵩，后来就欧美，英文听不懂，就只听旋律。也打网络游戏，梦幻西游当时很火，于是会在升10级以前拼命攒经验，因为10级以后要收费，没钱充点卡这件事确实让我非常困扰，于是我更多地是看别人玩，自己玩些免费的穿越火线，跑跑卡丁车，天龙八部这些游戏。关于穿越火线，那时候有很多刷枪外挂，我没钱买枪，我就拼命研究外挂知识。刷枪成功后，那种感觉实在是太爽了，但其实刷出枪以后并没有让我特别兴奋，最让我兴奋的是按着教程操作外挂并且成功实现，现在的我会用多巴胺理论来解释这样的行为，我的欲望是得到新枪，多巴胺刺激我实现欲望（操作外挂）让我感到快乐，但当我真正实现（刷枪成功）后多巴胺的作用就停止了，想来这是我人生第一次成为黑客的时候吧。当时最喜欢的杂志是《大众软件》，这本杂志影响了我太多，很多硬件测评虽然我买不起但读得津津有味，还有行业专题报道，包括 E3、英特尔升级制程之类的都会报道，我只能明白个大概，但总是埋下了种子。

后来就是小学毕业了。我在三年级的时候就知道我爸妈要离婚，共同抚养，小学毕业以后和我妈分开，和我爸去杭州上学，我想我过分的早熟也和这个经历有关。我在小学六年级的时候一方面希望早日毕业逃离小城市和傻逼的江苏教育苦海，一方面内向话不多的我希望留在母亲身边，母亲是我这辈子唯一会听我讲完所有废话的人了，接下来的几年我每年只和她见到一两面，但同时我又很怕我舍不得母亲会耽误我父母的离婚，我知道离婚对我父母都好，但如果我待在没有赚钱能力的母亲身边会拖累她，所以我用搞笑和幽默来伪装自己，我不知道为什么但我非常擅长这样，比如和我母亲开自己一点也不想被她管、做饭不好吃之类的玩笑，我至今都没有和我母亲坦白这件事情，我怕她后悔，这是我唯一不会和我母亲说的话了，因为我知道我说了我会大哭，其他任何话我什么都会和她说，除了这件事情。

（我不知道你隔着屏幕能否感受都这样的矛盾的情绪，但在我打字的当下，我已经好几年没这么哭过了。）

#卡片/自我

读盘
我的母亲是福建福州长乐人，是我外公外婆的第七个孩子也是第六个女儿，外公外婆还想要第二个男孩，但死活生不出来也养不起这么多孩子，于是我母亲便被在莆田的奶奶领养。

所以可以说我的父亲是和我母亲一起长大的，他比我母亲大四岁，但是在四五岁后才真的会讲话，据说也有点呆头呆脑的，我推测可能是轻微自闭症也可能是农村教育不当。

说到我父亲呆头呆脑，他在小学留了两级毕业，实在受不了老师便不再读书，去跟着别人学习修理电器、背着电箱电海里的鱼、去云南的诊所当学徒。

本来我的母亲和我的父亲应当算作兄妹关系，我母亲嫁人，我父亲娶老婆。但在我父亲的适婚时，家里有变故。我爷爷放高利贷放得太失败，可能是他心软吧，把钱贷给了赌徒，钱收不回，欠了很多钱，这样我父亲若要娶老婆就给不出彩礼（在莆田娶老婆是要给女方家庭彩礼的），我母亲说要不她嫁人就能出彩礼钱了，我父亲似乎等不了，觉得娶我母亲也能过日子，于是我母亲和我父亲就结婚了。

#卡片/自我

我的自我构造 - 大纲
- 引子
- 童年 - 泰兴
- 青春 - 杭州
- 醒悟 - 宁波
- 阳光多灿烂，而我行驶得缓慢

#卡片/自我
QBQ 思维模式
一个我最喜欢给别人讲的思维模式是 QBQ。QBQ 出自一本书《Questions behind Questions》，很简单，就是当我们想要指责别人、要求别人时，先考虑自己。

把这个带入等式，决策 = 经验 × QBQ 思维模式，当我们的经验（感受、工作等等）让我们火冒三丈时，比如我的同事又一次写了标点符号全错的文案我感觉我都要把稿子砸在他脸上的时候，这个经验乘上 QBQ 思维模式，我会先想到我可以做些什么？我是不是可以发他一份批注所有标点符号错误的文档让他修改并附上一个标点符号用法的网页？

而如果这个同事在看到你发的文档时，他也用到了 QBQ，不是拿着邮件指着鼻子骂你龟毛，而是他开始想他是不是该做些什么，他是不是应该把标点符号用法打印下来贴在桌子上提醒自己？

以我的经验，QBQ 思维模式可以解决项目内部 90% 的问题。这个模式用到领导者也是有效的，领导者会倾向于用「我们应该做些…」而不是「你们去做一下…」，以我被领导的经验，我永远都更喜欢前者的领导。

当然，这个模式有个悖论，如果我让我身边的人学习 QBQ，这个行为反而一点都不 QBQ，因为我在「希望别人以 QBQ 思考」。我们必须得承认，任何思维模式都是有边界的，QBQ 思维模式的边界就在于，如果系统内部有一个人不理解 QBQ，那么 QBQ 就无效。

解决方法
最近因为思考孵化器的运作，在联系过去半年看的、学的各种知识，我认为我找到了一个可能的解决方法。

Clayton Christensen 讲过一个他向英特尔董事长 Andrew Grove 展示颠覆式创新模型的故事。Andrew 只给了 Clayton 30 分钟，Clayton 刚讲完模型和该模型在钢铁行业的研究，Andrew 就打断了，说他明白了。Clayton 非常不解，说我还没给你讲芯片产业的事情呢你怎么就知道了？Andrew 条分缕析地告诉 Clayton 按照此模型英特尔应该推出赛扬处理器以抢占低端市场。Clayton 事后回忆道，如果他硬撑地给 Andrew 讲解英特尔应该做微处理器业务那么他早就被扫地出门了，关键的是给聪明人讲解「为什么」而不是「做什么」。

聪明人在这个语境下又意味着什么呢？在这个语境下，Andrew 是聪明人，但我认为，他更应该是有经验的人，他了解芯片行业和英特尔的能力范围，因此当他结合 Clayton 的模型后，他有了足够的能力决策。

这个经验如果推广到所有人，这个经验包括读过的书、做过的事情、学过的知识等等等。Clayton 的模型推广到所有模型，那我们可以把这个称为思维模式。

因此我可以给出一个等式：决策 = 经验 × 思维模式

用人话讲，思维模式帮助我们把好的经验高度抽象化，用来处理以后的决策。

我同时将在后续尝试证明，这个经验是存在边界的向量，乘号 (×) 其实应该是点乘符号 (·)，思维模式是矩阵。

但我可以做课外项目锻炼啊？
很多商学院学生在不满足课业的情况下，果断寻找课外项目实践。这里讨论宁诺的情况，宁诺的课外项目往往以社团、组织为中心。但这个方式依然容易失败。

以我做项目、带新生做项目的经验，我越发地发现，任何口头、笔头的经验传授都是失败的。对方根本不知道我的思考逻辑、在多个选择斡旋妥协、我的假设、我的偏见，因此根本不知道我为什么做出决策、对决策一知半解，如果这时候组织强调威信，命令接受者根本不敢发问和反驳，带来的后果就是灾难，好的情况是命令执行者执行不高效、执行有误，严重的情况是执行者没有任何动机、认为自己没学到东西然后退出项目。

这个问题的解决方法可以很粗暴。只和自己熟悉、知根知底的合伙人一起做联合创始人，联合创始人负责决策，然后传达给信任的员工执行。

这种方法对创业团队可行，创业者找到合伙人往往是聊天时聊出的「啊哈」时刻，点子都是大家一起想的，互相交流必然有默契。创业团队追求小而灵活，可以为了找到的信任的员工花很长时间考察，反正员工需求不多。

但是此方法对于商学院中做项目的团队简直是灾难。我下面列出一部分理由：

1. 新生（人才）市场是买方市场，新生有足够的议价能力。这个项目不行？我可去别的项目。想花多点的时间考察？不好意思 XX 组织已经给我 offer 了我还是退出终面吧。于是，每个项目的门槛非常低，导致不存在「信任的员工」。
2. 语境缺失，合伙人非常难找。没有语境提供，大家聊天往往都是「雅思考了吗」「实习找得怎么样了」「这门课好难哦」，以我的经验，我在商学院得不到任何接触未来可能合伙人的机会。
3. 有时候项目领导者就根本不是合格的领导者。让我们接受一个事实吧，合理的项目存活率绝对不到 20%，世界太复杂了没有一个项目能保证成功，但现在的情况是，学生组织如果做出一个项目，不管这个项目如何，这个项目总能好死不死地撑两三年，很多部长是强行当部长，根本不考虑项目领导者的能力。

商学院的失败
1881年，宾夕法尼亚大学开设沃顿商学院，这是美国的第一所商学院。1945年，全英第一所商学院——雷丁大学亨利商学院成立。1921年，中国第一所商学院——国立东南大学分设上海商科大学成立。本文笔者才疏学浅，但作为一名商学院学生，妄图尝试挑战历史超过100年的商学院体制，讨论商学院为什么失败。

本文不讨论个别商学院培养出的精英，诸位熟知的沃伦巴菲特、埃隆马斯克都是商学院培养出的精英，他们的成功是否和商学院相关？这是必然的，但相关并不意味着因果。

本文从另一个角度讨论一个被所有人视而不见的问题：为什么商学院并不能决定商学院毕业生有独有的商业能力？本文不想写成论文，就不严谨定义商学院、商业能力了，从主观角度我认为，商学院要培养成功的商业人才，就像计算机专业的毕业生都会写代码一样，因此商学院的体制想保持成功，我们得假设：商学院能保证商学院毕业生获得商业上的成功。

这个假设成立吗？《创新者的窘境》作者 Clayton M. Christensen 在哈佛商学院读 MBA，他在哈佛的同班同学 Jeff Skilling 是 Enron 丑闻的涉案者之一，Jeff Skilling 想必不算拥有商业上的成功吧？并且，我们把商学院的成功和商业精英联系在一起，是不是因为幸存者偏差呢？正因为商学院毕业的精英掌握了话语权，成为幸存者，才能被我们所获知，而失败的毕业生默默无闻，彻底被遗忘。而和计算机专业对比呢？如果这个学校的测试是严格的（没有作弊），那么毕业生是肯定能写出程序的。

这个假设反过来成立吗？商业上获得成功的人一定毕业于商学院吗？Jawbone 的创始人 Hosain Rahman 毕业于斯坦福大学 Mechanical Engineering。Beats 的创始人 Jimmy Iovine 19岁时开始在录音棚里工作。Steve Jobs 大学辍学。 Zuckerberg 在哈佛修的是心理学和计算机科学，而且读了两年他就退学了。 Airbnb 创始人是读设计的。

以上是「商学院的失败」的客观推断，不想写成论文，也不是本文重点，暂时不扩充了。接下来我想从主观上说明「商学院的失败」。

线性思维
线性思维也叫学生思维，即我们常常认为，要做到 C，必然要先做 A，再做 B，才能做到 C。我们的商学院设立了 level 1、level 2、level 3 的课，如果这门课的先修课没有学，那就不能修。但我们现实中面对的问题根本就没法用线性思维来解决，尤其是商业问题，在技术、数学问题上，我们可以轻易地找到教科书，但商业问题是没有一本技术手册告诉我们可以去学 A、C 和 D，商业问题面对的情况过于复杂了，最好的办法永远是直接解决 C。

线性思维还容易让我陷入框架误区，我们学习了两年市场营销、管理学、企业战略学，于是当我们想要提高产品销量时，就自然地想到要用市场营销的办法解决，投放广告、增加营销预算、改变品牌形象、焦点小组访谈。

为什么我觉得这是误区？因为任何商业问题都不是只有一个解决方法，必然需要跳出思维框架。

> Sewell Automotive 是美国一家很成功的汽车经销商，年销售额在5亿美元以上。公司的创始人 Carl Sewell在书里这样描述自己公司的服务：
> 
> 假设现在是凌晨5点，你在家，发现车胎瘪了……你只要打个电话，技术服务人员就会开车过来解决你的问题。
> 
> 凌晨5点开车过来帮你换轮胎，或者半夜送钥匙到机场给你，因为你开车门时钥匙断在锁孔里了，这些服务公司都不收钱。
> 
> Sewell Automotive 为什么要这么做呢？Carl在他的书里给了这样的一个答案：
> 
> 开车过去送钥匙比方说要花25美元。想一下电台广告的成本。在达拉斯，交通高峰期在黄金档电台做60秒的广告要花700美元。我花25美元帮你开门进车，很有可能你这辈子就永远是我的客户了。
> 
> 要是花700美元做一个电台广告，我要得到几个一生的客户才能获得我半夜雪中送炭的效果？700除以25，是28，我必须要得到28个终生客户。常识告诉我，一个电台广告是不可能给我带来28个终生客户的。

设计失败
在《创业维艰》一书中，Ben Horowitz 给出了一条非常明显的忠告：

> 创业只能通过创业来学习。

很难想象，学生能在学校的课堂里学会如何创业，我自己的看法是，创业学就像盲人摸象，认为用理性的方法摸到了创始公司的成功经验就认为这是成功的创业方法论，创业中固然有 20% 的知识是通用的（其中包括精益创业这些商学院根本不教的内容），但其他 80% 是创始人在面对复杂环境下做的决策，任何一个小有成就的创始人都可以做一整晚的创业经验演讲，但这个经验和他的成功相关，不是因果，这些经验是面对大量复杂变量下的决策，很有可能在不同时间、不同文化、不同创始人面前失败。

就算商学院讲授的是最准确的 20% 的经验，其他的 80% 经验错误，这个创业公司依然会失败。